{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA4DeA,MA1Df,SAAkBC,GACd,MAA2BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAApE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MACxBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QActB,OACQ,sBAAMW,UAAY,YAAYC,SAZjB,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAIL,SACKL,EAAME,KACP,qCACA,uBACAoB,KAAM,OACNC,YAAY,mBACZpB,MAAOC,EACPoB,KAAO,OACPV,UAAY,kBACZW,SAAYd,EACZe,IAAKpB,IAET,wBAAQQ,UAAY,mBAApB,yBAIA,qCACA,uBACAQ,KAAM,OACNC,YAAY,aACZpB,MAAOC,EACPoB,KAAO,OACPV,UAAY,aACZW,SAAYd,EACZe,IAAKpB,IAET,wBAAQQ,UAAY,cAApB,8B,eCPOa,MAxCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC5C,EAAwB9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAaA,OAAG9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATX,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QASRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACIrB,UAAaoB,EAAKE,WAAa,oBAAqB,WADxD,UAII,qBAAqBC,QAAU,kBAAMR,EAAaK,EAAKjB,KAAvD,SACKiB,EAAKb,MADEa,EAAKjB,IAGjB,sBAAKH,UAAY,QAAjB,UACI,cAAC,IAAD,CACAuB,QAAU,kBAAMP,EAAWI,EAAKjB,KAChCH,UAAY,gBAEZ,cAAC,IAAD,CACAuB,QAAU,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QAClDP,UAAY,mBAZTqB,OCwBJG,MA/Cf,WACI,MAA0BrC,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcW,EAAd,KAqCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAWxB,SAtCH,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAgCL,cAAC,EAAD,CAAMb,MAASA,EAAOC,aAdT,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,IAAMA,IACViB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAO+CZ,WA7BzC,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IA0BuEZ,WAvBjE,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAGA,EAAK/B,KAAO4B,EAASC,EAAWE,eCjB1DC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,OCFNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.383974fd.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\n\nfunction TodoForm(props) {\n    const [input, setInput] =  useState(props.edit ? props.edit.value : '');\n\n    const inputRef = useRef(null)\n    useEffect(() => {\n        inputRef.current.focus()\n    });\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        props.onSubmit({\n            id: Math.floor(Math.random()*1000000),\n            text: input\n        });\n\n        setInput('');\n    };\n        \n    return (\n            <form className = 'todo-form' onSubmit={handleSubmit}>\n                {props.edit ? ( \n                <>\n                <input \n                type= 'text' \n                placeholder='Update your item' \n                value={input} \n                name = 'text' \n                className = 'todo-input edit'\n                onChange = {handleChange}\n                ref={inputRef}\n            />\n            <button className = 'todo-button edit'> Update </button>\n            </>\n            ) : \n            (\n            <>\n            <input \n            type= 'text' \n            placeholder='Add a todo' \n            value={input} \n            name = 'text' \n            className = 'todo-input'\n            onChange = {handleChange}\n            ref={inputRef}\n        />\n        <button className = 'todo-button'> Add todo </button>\n        </>\n            )}\n                \n            </form> \n        );\n    }\n\nexport default TodoForm\n","import React, {useState} from 'react'\nimport TodoForm from './TodoForm'\nimport {MdDeleteForever} from 'react-icons/md'\nimport {RiEdit2Fill} from 'react-icons/ri'\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        });\n    };\n\n    if(edit.id){\n        return<TodoForm edit={edit} onSubmit={submitUpdate} />;\n    }\n\n\n    return todos.map((todo, index) => (\n        <div\n            className = {todo.isComplete ? 'todo-row complete' :'todo-row'}\n            key = {index}\n        >\n            <div key = {todo.id} onClick= {() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className = \"icons\">\n                <MdDeleteForever \n                onClick= {() => removeTodo(todo.id)}        \n                className = 'delete-icon'        \n                />\n                <RiEdit2Fill \n                onClick= {() => setEdit({id: todo.id, value: todo.text})}        \n                className = 'edit-icon'  />\n            </div>\n        </div>\n    ));\n}\n\nexport default Todo\n","import React, {useState} from 'react'\nimport TodoForm from './TodoForm'\nimport Todo from './Todo'\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n\n        const newTodos = [todo, ...todos];\n\n        setTodos(newTodos);\n    };\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n\n        setTodos(removeArr)\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n\n        setTodos(prev => prev.map(item=>(item.id === todoId ? newValue : item))\n        );\n    };\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if(todo.id == id){\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    };\n\n    return (\n        <div>\n            <h1>What's the Plan for Today?</h1>\n            <TodoForm  onSubmit={addTodo} />\n            <Todo todos = {todos} completeTodo = {completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\n        </div>\n    );\n}\n\nexport default TodoList\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}